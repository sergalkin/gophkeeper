// Code generated by MockGen. DO NOT EDIT.
// Source: ./crypt.go

// Package cryptmock is a generated GoMock package.
package cryptmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrypter is a mock of Crypter interface.
type MockCrypter struct {
	ctrl     *gomock.Controller
	recorder *MockCrypterMockRecorder
}

// MockCrypterMockRecorder is the mock recorder for MockCrypter.
type MockCrypterMockRecorder struct {
	mock *MockCrypter
}

// NewMockCrypter creates a new mock instance.
func NewMockCrypter(ctrl *gomock.Controller) *MockCrypter {
	mock := &MockCrypter{ctrl: ctrl}
	mock.recorder = &MockCrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypter) EXPECT() *MockCrypterMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockCrypter) Decode(sha string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", sha)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockCrypterMockRecorder) Decode(sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockCrypter)(nil).Decode), sha)
}

// Encode mocks base method.
func (m *MockCrypter) Encode(payload string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", payload)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockCrypterMockRecorder) Encode(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockCrypter)(nil).Encode), payload)
}
